# pip install vk_api requests
# Эта строка — комментарий, который напоминает, что нужно установить библиотеки vk_api и requests.
# В реальном коде эта строка не выполняется, она предназначена для установки зависимостей вручную.

import vk_api 
from vk_api.longpoll import VkLongPoll, VkEventType
import requests
# Импортируем необходимые библиотеки:
# - vk_api: для взаимодействия с API ВКонтакте.
# - VkLongPoll и VkEventType: для работы с Long Poll API ВКонтакте, который позволяет получать события в реальном времени.
# - requests: для выполнения HTTP-запросов к внешним API.

# Ваш токен доступа сообщества ВКонтакте
VK_TOKEN = ''

# Токен доступа, который позволяет боту взаимодействовать с API ВКонтакте от имени сообщества.
# Замените 'содержимое' на ваш реальный токен.

# Функция для получения данных о погоде
def get_weather(city):
    # Определяем функцию, которая будет запрашивать данные о погоде для указанного города.

    api_key = ''
    # API-ключ для доступа к OpenWeatherMap API. Замените '88877' на ваш реальный ключ.

    base_url = 'http://api.openweathermap.org/data/2.5/weather'
    # Базовый URL для запроса данных о погоде.

    params = {
        'q': city,
        'appid': api_key,
        'units': 'metric',  # Используем метрическую систему (Цельсий)
        'lang': 'ru'
    }
    # Параметры запроса:
    # - 'q': название города.
    # - 'appid': API-ключ.
    # - 'units': единицы измерения (метрическая система).
    # - 'lang': язык ответа (русский).

    response = requests.get(base_url, params=params)
    # Выполняем GET-запрос к API OpenWeatherMap с указанными параметрами.

    data = response.json()
    # Преобразуем ответ в формат JSON.

    # Логирование ответа
    print(f"Response: {data}")
    # Выводим ответ API в консоль для отладки.

    if data['cod'] == 200:
        # Проверяем, успешно ли выполнен запрос (код 200).

        weather = data['weather'][0]['description']
        temp = data['main']['temp']
        # Извлекаем описание погоды и температуру из ответа.

        return f"Погода в {city}: {weather}, температура: {temp}°C"
        # Формируем строку с информацией о погоде и возвращаем её.
    else:
        return "Не удалось получить данные о погоде."
        # Если запрос не удался, возвращаем сообщение об ошибке.

# Основная функция чат-бота
def main():
    # Основная функция, которая запускает бота и обрабатывает входящие сообщения.

    vk_session = vk_api.VkApi(token=VK_TOKEN)
    # Создаём сессию для взаимодействия с API ВКонтакте.

    longpoll = VkLongPoll(vk_session)
    # Инициализируем Long Poll для получения событий в реальном времени.

    try:
        for event in longpoll.listen():
            # Начинаем слушать входящие события.

            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                # Проверяем, является ли событие новым сообщением, адресованным боту.

                user_message = event.text.lower()
                # Получаем текст сообщения и приводим его к нижнему регистру.

                if 'погода' in user_message:
                    # Проверяем, содержит ли сообщение слово "погода".

                    city = user_message.split('в ')[-1]
                    # Извлекаем название города из сообщения.

                    weather_info = get_weather(city)
                    # Получаем информацию о погоде для указанного города.

                    vk_session.method('messages.send', {
                        'user_id': event.user_id,
                        'message': weather_info,
                        'random_id': 0
                    })
                    # Отправляем ответ пользователю с информацией о погоде.
    except Exception as e:
        print(f"Произошла ошибка: {e}")
        # Ловим и выводим любые исключения, которые могут возникнуть в процессе выполнения.

if __name__ == '__main__':
    main()
    # Если скрипт запускается напрямую, вызываем основную функцию main().

    